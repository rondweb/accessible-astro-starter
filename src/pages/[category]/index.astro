---
import DefaultLayout from '@layouts/DefaultLayout.astro'
import PageHeader from '@components/PageHeader.astro'
import { Badge, Card, Link, Pagination } from 'accessible-astro-components'
import { getCollection } from 'astro:content'
import type { GetStaticPaths } from 'astro'
import type { CollectionEntry } from 'astro:content'

// Função para criar slug amigável para URL a partir do título do produto
function createProductSlug(title: string): string {
  return title
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^a-z0-9\s-]/g, '') // Remove caracteres especiais
    .trim()
    .replace(/\s+/g, '-') // Substitui espaços por hífens
    .replace(/-+/g, '-') // Remove hífens múltiplos
    .replace(/^-|-$/g, '') // Remove hífens do início e fim
}

// Import images directly for optimization
import projectImage1 from '@assets/images/projects/project-image-1.png'
import projectImage2 from '@assets/images/projects/project-image-2.png'
import projectImage3 from '@assets/images/projects/project-image-3.png'
import projectImage4 from '@assets/images/projects/project-image-4.png'
import projectImage5 from '@assets/images/projects/project-image-5.png'
import projectImage6 from '@assets/images/projects/project-image-6.png'

export const getStaticPaths = (async ({ paginate }) => {
  const products = await getCollection('products')

  // Função para formatar o título da categoria removendo hífens desnecessários
  const formatCategoryTitle = (slug: string): string => {
    switch(slug) {
      case 'health-wellness-for-her':
        return 'Health & Wellness for Her'
      case 'home-garden':
        return 'Home & Garden'
      case 'sports-outdoors':
        return 'Sports & Outdoors'
      default:
        return slug.charAt(0).toUpperCase() + slug.slice(1).replace(/-/g, ' & ')
    }
  }

  // Group products by category
  const productsByCategory = products.reduce((acc, product) => {
    const category = product.data.category
    if (!acc[category]) {
      acc[category] = []
    }
    acc[category].push(product)
    return acc
  }, {} as Record<string, CollectionEntry<'products'>[]>)

  const projectImages = [projectImage1, projectImage2, projectImage3, projectImage4, projectImage5, projectImage6]

  const paths: any[] = []

  // Create paths for each category (first page only)
  Object.entries(productsByCategory).forEach(([categorySlug, categoryProducts]) => {
    const productsWithImages = categoryProducts.map((product, index) => ({
      ...product,
      featuredImage: product.data.image ? product.data.image : projectImages[index % projectImages.length],
    }))

    // Only create the first page (no pagination for index)
    paths.push({
      params: { category: categorySlug },
      props: {
        page: {
          data: productsWithImages.slice(0, 6), // First 6 products
          start: 0,
          end: Math.min(6, productsWithImages.length) - 1,
          total: productsWithImages.length,
          currentPage: 1,
          lastPage: Math.ceil(productsWithImages.length / 6),
          url: {
            prev: null,
            next: productsWithImages.length > 6 ? `/${categorySlug}/2` : null
          }
        },
        category: {
          title: formatCategoryTitle(categorySlug),
          description: `${formatCategoryTitle(categorySlug)} products and accessories`,
          slug: categorySlug
        }
      }
    })
  })

  return paths
}) satisfies GetStaticPaths

interface Props {
  page: {
    data: Array<CollectionEntry<'products'> & { featuredImage: any }>
    start: number
    end: number
    total: number
    currentPage: number
    lastPage: number
    url: {
      prev: string | null
      next: string | null
    }
  }
  category: {
    title: string
    description: string
    slug: string
  }
}

const { page, category } = Astro.props
---

<DefaultLayout
  title={`${category.title} - Product Category`}
  description={category.description}
>
  <PageHeader
    title={category.title}
    subtitle={category.description}
    bgType="bordered"
  />
  <section class="my-12">
    <div class="container">
      <p class="mt-8 text-sm">
        <em>Product {page.start + 1} through {page.end + 1} of {page.total} total products</em>
      </p>
      <ul class="mt-3 grid grid-cols-1 gap-6 md:grid-cols-2 lg:grid-cols-3">
        {
          page.data.map((product) => (
            <li>
              <Card
                imageComponent={product.featuredImage}
                url={`/${product.data.category}/${createProductSlug(product.data.title)}`}
                title={product.data.title}
                headingLevel="h2"
                footer={`Price: ${product.data.price}`}
                fullHeight={true}
              >
                <span slot="meta">
                  {product.data.tags.map((tag: string) => (
                    <Badge>{tag}</Badge>
                  ))}
                </span>
                {product.data.description}
                <div class="mt-4">
                  <Link
                    href={product.data.affiliateUrl}
                    isExternal
                    isButton
                    type="primary"
                    class="w-full text-center"
                    animateOnHover
                    animationType="boop"
                  >
                    Get it Now
                  </Link>
                </div>
              </Card>
            </li>
          ))
        }
      </ul>
      {
        page && page.lastPage > 1 && (
          <div class="mt-12 grid place-content-center">
            <Pagination
              firstPage={page.url.prev ? `/${category.slug}` : null}
              previousPage={page.url.prev ? page.url.prev : null}
              nextPage={page.url.next ? page.url.next : null}
              lastPage={page.url.next ? `/${category.slug}/${page.lastPage}` : null}
              currentPage={`${page.currentPage}`}
              totalPages={`${page.lastPage}`}
              ariaLabel={`${category.title} category pagination`}
            />
          </div>
        )
      }
    </div>
  </section>
</DefaultLayout>
